# Set to true to log user information returned from LDAP
verbose_logging = true

[[servers]]
# Ldap server host (specify multiple hosts space separated)
host = "{{ grafana_ldap_host }}"
# Default port is 389 or 636 if use_ssl = true
port = {{ grafana_ldap_port }}
# Set to true if ldap server supports TLS
use_ssl = {{ grafana_ldap_use_ssl }}
# set to true if you want to skip ssl cert validation
ssl_skip_verify = {{ grafana_ldap_ssl_skip_verify }}
# set to the path to your root CA certificate or leave unset to use system defaults
# root_ca_cert = /path/to/certificate.crt
{% if grafana_ldap_root_ca_cert is defined and grafana_ldap_root_ca_cert != "" %}
root_ca_cert = {{ grafana_ldap_root_ca_cert }}
{% endif %}

# Search user bind dn
bind_dn = "{{ grafana_ldap_bind_dn }}"
# Search user bind password
bind_password = '{{ grafana_ldap_bind_password }}'

# User search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)"
search_filter = "{{ grafana_ldap_search_filter }}"

# An array of base dns to search through
search_base_dns = {{ grafana_ldap_search_base_dns }}

# In POSIX LDAP schemas, without memberOf attribute a secondary query must be made for groups.
# This is done by enabling group_search_filter below. You must also set member_of= "cn"
# in [servers.attributes] below.

## Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available)
{% if grafana_ldap_group_search_filter is defined and grafana_ldap_group_search_filter != "" %}
group_search_filter = "{{ grafana_ldap_group_search_filter }}"
{% endif %}

## An array of the base DNs to search through for groups. Typically uses ou=groups
{% if grafana_ldap_group_search_base_dns is defined and grafana_ldap_group_search_base_dns != "" %}
group_search_base_dns = {{ grafana_ldap_group_search_base_dns }}
{% endif %}

# Specify names of the ldap attributes your ldap uses
[servers.attributes]
name = "{{ grafana_ldap_server_attr_name }}"
surname = "{{ grafana_ldap_server_attr_surname }}"
username = "{{ grafana_ldap_server_attr_username }}"
member_of = "{{ grafana_ldap_server_attr_member_of }}"
email =  "{{ grafana_ldap_server_attr_email }}"

# Map ldap groups to grafana org roles
[[servers.group_mappings]]
group_dn = "{{ grafana_ldap_admin_group_mappings }}"
org_role = "Admin"
# The Grafana organization database id, optional, if left out the default org (id 1) will be used
# org_id = 1

[[servers.group_mappings]]
group_dn = "{{ grafana_ldap_editor_group_mappings }}"
org_role = "Editor"

[[servers.group_mappings]]
# If you want to match all (or no ldap groups) then you can use wildcard
group_dn = "{{ grafana_ldap_viewer_group_mappings }}"
org_role = "Viewer"